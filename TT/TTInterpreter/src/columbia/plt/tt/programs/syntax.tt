// Start with translationUnit
// Test imports and importedLibraries
import "testLibrary";
import "michelleLib";

// Test programBody and methodsAndFieldsDeclarations

// test GLOBAL declarationStatement
Calendar c;

// test GLOBAL definitionStatement
String s = "Hello World";

// Test main and block
main() {
	// Test statement_type
	// Test type and declarationStatement
	String s;
	Number n;
	Date d;
	Task t;
	TimeFrame tf;
	Calendar c;
	Time time;
	
	// Test basic definitionStatement for all type
	String s = "hello there!";
	Number n = 13;
	Date d = 2013.02;
	Task t = "Do Work";
	TimeFrame tf = 1 day + 4 days;
	Calendar c = "My Calendar";
	Time mon = Monday;

	// Test assignmentStmt
	var = 3;
	
	// Test ifThenStatement
	if ( 3 < a) {
		print ("3 is < a!");
	}
	
	if ( a == b ) {
		// Do Something	
	}
	else {
		// Do Something else
	}
	
	// Test everyFromToByStatement also dateOrIdent and timeframeOrIdent
	every Date d from 2013.01.10 to endDate by 3 days {
		
	}
	
	// Test everyInStatement
	every Task t in c {
		// test breakStatement
		break;
	}
	
	// test constraintOptions
	every Task t in c from 2013.05.02.10.30 to 2013.05.02.12.30 {
		// test continueStatement
		continue;
	}
	
	// test constraintOptions and loopOptions
	every Task t in c from s to e on (t.name == "homework") {
	
	}
	
	// test loopOptions
	every Task t in c on ( 5 > 9 ) {
	
	}
	
	// Test exitStatement
	exit;
	
	// Test functionInvocationStatement and argumentList and expressionList
	function(arg1, arg2);
	n = getNumber();
	
	// Test print
	print("Hello world");
	// Test readStatement
	read("what's your name?: ");
	
	// Test timeFrameConstant and timeFrameSuffix
	t = 1 year + 2 years + 3 month + 4 months + 5 day + 6 days + 7 hour + 8 hours + 9 minute + 10 minutes;
	
	// Test logicalExpression OR
	t = a || b;
	t = 1 || 2;
	t = a || 2;
	t = 1 || a;
	
	// Test booleanExpression AND
	t = a && b;
	t = 1 && 2;
	t = a && 2;
	t = 1 && b;
	
	// Test equalityExpression
	t = a == b;
	t = 1 == 2;
	t = a == 2;
	t = 1 == b;
	t = a != b;
	t = 1 != 2;
	t = a != 2;
	t = 1 != b;
	
	// Test relationalExpression
	t = a < b;
	t = 1 < 2;
	t = a < 2;
	t = 1 < b;
	t = a <= b;
	t = 1 <= 2;
	t = a <= 2;
	t = 1 <= b;
	t = a > b;
	t = 1 > 2;
	t = a > 2;
	t = 1 > b;
	t = a >= b;
	t = 1 >= 2;
	t = a >= 2;
	t = 1 >= b;
	
	// Test additiveExpression
	t = a + b;
	t = 1 + 2;
	t = a + 2;
	t = 1 + b;
	t = a - b;
	t = 1 - 2;
	t = a - 2;
	t = 1 - b.name;
	
	// Test multiplicativeExpression
	t = a * b;
	t = 1 * 2;
	t = a * 2;
	t = 1 * b;
	t = a / b;
	t = 1 / 2;
	t = a / 2;
	t = 1 / b;
	t = a mod b;
	t = 1 mod 2;
	t = a mod 2;
	t = 1 mod b;
	
	// test memberAccessExpression
	t = a == b;
	t = 1 == 2;
	t = a == 2;
	t = 1 == b;
	
	// Test unaryExpression
	t = not a;
	t = not (1 == 2);
	t = a == 2;
	t = 1 == not b;
	
	// Test primaryExpression
	t = a == b;
	t = 1 == 2;
	t = a == 2;
	t = 1 == b;
	
	// Test exprInParentheses
	t = a == b;
	t = 1 == 2;
	t = a == 2;
	t = 1 == b;
	
	// Test DATE_CONSTANT
	Date d = 2013;
	Date d = 1999.10;
	Date d = 2222.12.01;
	Date d = 2010.05.10.23;
	Date d = 2013.03.13.12.30;
	
	// Test assignmentStmt and  memberAccessExpression
	t.name = "hello";
	
	// Test boolConstant
	y = true;
	n = false;
	
	// Test timeEntityConstant
	t = Monday;
	t = Tuesday;
	t = Wednesday;
	t = Thursday;
	t = Friday;
	t = Saturday;
	t = Sunday;
	t = January;
	t = February;
	t = March;
	t = April;
	t = May;
	t = June;
	t = July;
	t = August;
	t = September;
	t = October;
	t = November;
	t = December;
	t = Weekend;
	t = Weekday;
	
}


// Test methodDeclarations methodSignature and block
Number getNumber() {
	
	// Test returnStatement
	return 3;
}

// Test methodParamaters methodParamaterList and argDeclaration
String getString(String name) {
	String a = name;
	// Test returnStatement
	return a;
}

calculateThis(Number a, Number b, String c) {
	return (a + b);
}